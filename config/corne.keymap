/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */



#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>

#define ___ &trans

/ {
    macros {
        mouseless: mouseless {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LGUI>
                , <&macro_tap &kp O>
                , <&macro_release &kp LGUI>
                , <&macro_release &kp LCTRL>
                ;
        };
        mmv_nw: mmv_nw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_UP &mmv MOVE_LEFT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_UP &mmv MOVE_LEFT>
                ;
        };
        mmv_ne: mmv_ne {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_UP &mmv MOVE_RIGHT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_UP &mmv MOVE_RIGHT>
                ;
        };
        mmv_sw: mmv_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_DOWN &mmv MOVE_LEFT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_DOWN &mmv MOVE_LEFT>
                ;
        };
        mmv_se: mmv_se {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_DOWN &mmv MOVE_RIGHT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_DOWN &mmv MOVE_RIGHT>
                ;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_repeat {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&key_repeat>;
        };
        combo_repeat2 {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&key_repeat>;
        };
        combo_med {
            timeout-ms = <40>;
            key-positions = <3 13>;
            bindings = <&mo 5>;
        };
        combo_cut {
            timeout-ms = <40>;
            key-positions = <20 21>;
            bindings = <&kp LG(X)>;
        };
        combo_copy {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp LG(C)>;
        };
        combo_paste {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LG(V)>;
        };
        combo_cw {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&caps_word>;
        };
        combo_caps {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp CAPS>;
        };
    };
};

//         empty {
//             bindings = <
// 0                1                2                3                4                5                6                7                8                9
// 10               11               12               13               14               15               16               17               18               19
// 20               21               22               23               24               25               26               27               28               29
//                                                    30               31               32               33               34               35                
//             >;
//         };

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        llt: left_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rlt: right_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        lmt_noqt: left_mod_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt_noqt: right_mod_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        llt_noqt: left_layer_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rlt_noqt: right_layer_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        // lt: layer_tap is default behavior, we make a blt to avoid overriding it ðŸ¥ª
        blt: balanced_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        blt_noqt: balanced_layer_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&kp>;
        };

        lmt_rpi: left_mod_tap_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt_rpi: right_mod_tap_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp Q               &kp W               &kp F               &kp P               &kp B               &kp J               &kp L               &kp U               &kp Y               &kp SQT
&lmt_rpi LCTRL A    &lmt_rpi LALT R     &lmt_rpi LGUI S     &lmt_noqt LSHIFT T  &kp G               &kp M               &rmt_noqt LSHIFT N  &rmt_rpi LGUI E     &rmt_rpi LALT I     &rmt_rpi LCTRL O
&kp Z               &kp X               &kp C               &llt_noqt 3 D       &kp V               &kp K               &rlt_noqt 3 H       &kp COMMA           &kp DOT             &kp FSLH
                                        ___                 &blt_noqt 2 SPACE   &blt 5 ESC          &blt 4 RET          &blt_noqt 2 BSPC    ___
            >;
        };

        qwerty {
            bindings = <
&kp Q               &kp W               &kp E               &kp R               &kp T               &kp Y               &kp U               &kp I               &kp O               &kp P
&lmt_rpi LCTRL A    &lmt_rpi LALT S     &lmt_rpi LGUI D     &lmt LSHIFT F       &kp G               &kp H               &rmt LSHIFT J       &rmt_rpi LGUI K     &rmt_rpi LALT L     &rmt_rpi LCTRL SQT
&kp Z               &kp X               &kp C               &llt 3 V            &kp B               &kp N               &rlt 3 M            &kp COMMA           &kp DOT             &kp FSLH
                                        ___                 &blt 2 SPACE        &blt 5 ESC          &blt 4 RET          &blt 2 BSPC         ___
            >;
        };

        space {
            bindings = <
&kp GRAVE           &kp N7              &kp N8              &kp N9              ___                 ___                 &kp MINUS           &kp LBKT            &kp RBKT            &kp EQUAL
&lmt LCTRL N0       &lmt LALT N4        &lmt LGUI N5        &lmt LSHIFT N6      ___                 &kp LEFT            &rmt LSHIFT DOWN    &rmt LGUI UP        &rmt LALT RIGHT     &rmt LCTRL SEMI
___                 &kp N1              &kp N2              &kp N3              ___                 &kp HOME            &kp PG_DN           &kp PG_UP           &kp END             &kp BSLH
                                        ___                 &kp TAB             ___                 &kp DEL             ___                 ___
            >;
        };

        space_shift {
            bindings = <
&kp LS(GRAVE)       &kp LS(N7)          &kp LS(N8)          &kp LS(N9)          ___                 ___                 &kp LS(MINUS)       &kp LS(LBKT)        &kp LS(RBKT)        &kp LS(EQUAL)
&lmt LCTRL LS(N0)   &lmt LALT LS(N4)    &lmt LGUI LS(N5)    &lmt LSHIFT LS(N6)  ___                 &kp LS(LEFT)        &rmt LSHIFT LS(DOWN) &rmt LGUI LS(UP)   &rmt LALT LS(RIGHT) &rmt LCTRL LS(SEMI)
___                 &kp LS(N1)          &kp LS(N2)          &kp LS(N3)          ___                 &kp LS(HOME)        &kp LS(PG_DN)       &kp LS(PG_UP)       &kp LS(END)         &kp LS(BSLH)
                                        ___                 &kp LS(TAB)         ___                 &kp LS(DEL)         ___                 ___
            >;
        };

        fun {
            bindings = <
&kp F12             &kp F7              &kp F8              &kp F9              ___                 ___                 ___                 ___                 ___                 ___              
&kp F11             &kp F4              &kp F5              &kp F6              ___                 ___                 ___                 ___                 ___                 ___              
&kp F10             &kp F1              &kp F2              &kp F3              ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        mouse {
            bindings = <
/* ___                 ___                 ___                 ___                 ___                 ___                 &mouseless          &kp LG(LC(F))       &kp LG(LC(D))       ___ */
___                 ___                 ___                 ___                 ___                 &mmv_nw             &mmv_sw             &mmv_ne             &mmv_se             ___
___                 ___                 ___                 ___                 ___                 &mmv MOVE_LEFT      &mmv MOVE_DOWN      &mmv MOVE_UP        &mmv MOVE_RIGHT     &kp LG(LC(K))
___                 ___                 ___                 ___                 ___                 &msc SCRL_LEFT      &msc SCRL_UP        &msc SCRL_DOWN      &msc SCRL_RIGHT     &kp LG(LC(FSLH)) 
                                        ___                 ___                 ___                 &mkp RCLK           &mkp LCLK           &mkp MCLK
            >;
        };

        med {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &kp C_PREV          &kp C_VOL_DN        &kp C_VOL_UP        &kp C_NEXT          ___              
___                 ___                 ___                 ___                 ___                 &kp C_PP            &kp C_BRI_DN        &kp C_BRI_UP        &kp C_MUTE          ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        empty {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };
    };
};
