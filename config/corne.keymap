/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>

#define ___ &trans

/ {
    combos {
        compatible = "zmk,combos";
//        combo_esc {
//            timeout-ms = <40>;
//            key-positions = <12 13>;
//            bindings = <&mt LG(LALT) ESC>;
//        };
//        combo_tab {
//            timeout-ms = <40>;
//            key-positions = <22 23>;
//            bindings = <&kp TAB>;
//        };
//        combo_ret {
//            timeout-ms = <40>;
//            key-positions = <16 17>;
//            bindings = <&mt LG(LALT) RET>;
//        };
        combo_repeat {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&key_repeat>;
        };
//        combo_cw {
//            timeout-ms = <40>;
//            key-positions = <26 27>;
//            bindings = <&caps_word>;
//        };
        combo_pg_dn {
            timeout-ms = <40>;
            key-positions = <26 27>;
            layers = <1>;
            bindings = <&kp PG_DN>;
        };
        combo_pg_up {
            timeout-ms = <40>;
            key-positions = <27 28>;
            layers = <1>;
            bindings = <&kp PG_UP>;
        };
        combo_home {
            timeout-ms = <40>;
            key-positions = <21 22>;
            layers = <1>;
            bindings = <&kp HOME>;
        };
        combo_end {
            timeout-ms = <40>;
            key-positions = <22 23>;
            layers = <1>;
            bindings = <&kp END>;
        };
        combo_qwerty {
            timeout-ms = <40>;
            key-positions = <20 21>;
            bindings = <&tog 1>;
        };
        combo_med {
            timeout-ms = <40>;
            key-positions = <2 12>;
            bindings = <&mo 6>;
        };
    };
};

//         empty {
//             bindings = <
// 0                1                2                3                4                5                6                7                8                9
// 10               11               12               13               14               15               16               17               18               19
// 20               21               22               23               24               25               26               27               28               29
//                                                    30               31               32               33               34               35                
//             >;
//         };

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            // quick-tap-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            // quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        rlt: right_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        llt: left_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            // quick-tap-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        ltqt: layer_tap_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        // lt: layer_tap is default behavior, we make a blt to avoid overriding it ðŸ¥ª
        blt: balanced_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&kp>;
        };

        ltcw: layer_tap_caps_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak { // 0
            bindings = <
&kp Q               &kp W               &kp F               &kp P               &kp B               &kp J               &kp L               &kp U               &kp Y               &kp SQT
&lmt LCTRL A        &lmt LALT R         &lmt LGUI S         &lmt LSHIFT T       &kp G               &kp M               &rmt LSHIFT N       &rmt LGUI E         &rmt LALT I         &rmt LCTRL O  
&kp Z               &kp X               &kp C               &kp D               &kp V               &kp K               &kp H               &kp COMMA           &kp DOT             &kp FSLH      
                                        &blt 5 TAB          &blt 3 SPACE        &blt 1 ESC          &blt 1 RET          &blt 2 BSPC         &ltcw 4 0
            >;
        };

        sym { // 1
            bindings = <
&kp GRAVE           &kp AMPS            &kp STAR            &kp PLUS            ___                 ___                 &kp TILDE           &kp LPAR            &kp RPAR            &kp PIPE
&lmt LCTRL CARET    &lmt LALT DLLR      &lmt LGUI EQUAL     &lmt LSHIFT MINUS   ___                 ___                 &rmt LSHIFT COLON   &rmt LGUI LBKT      &rmt LALT RBKT      &rmt LCTRL SEMI
&kp PRCNT           &kp EXCL            &kp AT              &kp HASH            ___                 ___                 &kp UNDER           &kp LBRC            &kp RBRC            &kp BSLH
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        num { // 2
            bindings = <
___                 &kp N7              &kp N8              &kp N9              ___                 ___                 ___                 ___                 ___                 ___
___                 &kp N4              &kp N5              &kp N6              ___                 ___                 ___                 ___                 ___                 ___
___                 &kp N1              &kp N2              &kp N3              ___                 ___                 ___                 ___                 ___                 ___
                                        ___                 &kp N0              ___                 ___                 ___                 ___              
            >;
        };

        nav { // 3
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
___                 ___                 ___                 ___                 ___                 &kp LEFT            &kp DOWN            &kp UP              &kp RIGHT           ___            
___                 ___                 ___                 ___                 ___                 &kp HOME            &kp PG_DN           &kp PG_UP           &kp END             ___       
                                        ___                 ___                 ___                 ___                 &kp DEL             ___              
            >;
        };

        fun { // 4
            bindings = <
&kp F12             &kp F7              &kp F8              &kp F9              ___                 ___                 ___                 ___                 ___                 ___              
&kp F11             &kp F4              &kp F5              &kp F6              ___                 ___                 ___                 ___                 ___                 ___              
&kp F10             &kp F1              &kp F2              &kp F3              ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        mouse { // 5
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &mmv MOVE_LEFT      &mmv MOVE_DOWN      &mmv MOVE_UP        &mmv MOVE_RIGHT     ___              
___                 ___                 ___                 ___                 ___                 &msc SCRL_LEFT      &msc SCRL_UP        &msc SCRL_DOWN      &msc SCRL_RIGHT     ___              
                                        ___                 ___                 ___                 &mkp RCLK           &mkp LCLK           &mkp MCLK
            >;
        };

        med { // 6
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &kp C_PREV          &kp C_VOL_DN        &kp C_VOL_UP        &kp C_NEXT          ___              
___                 ___                 ___                 ___                 ___                 &kp C_PP            &kp C_BRI_DN        &kp C_BRI_UP        &kp C_MUTE          ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        empty {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };
    };
};
