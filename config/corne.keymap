/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>

#define ___ &trans

/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <40>;
            key-positions = <12 13>;
            bindings = <&mt LG(LALT) ESC>;
        };
        combo_tab {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp TAB>;
        };
        combo_ret {
            timeout-ms = <40>;
            key-positions = <16 17>;
            bindings = <&mt LG(LALT) RET>;
        };
        combo_repeat {
            timeout-ms = <40>;
            key-positions = <23 31>;
            bindings = <&key_repeat>;
        };
    };
};

//         empty {
//             bindings = <
// 0                1                2                3                4                5                6                7                8                9
// 10               11               12               13               14               15               16               17               18               19
// 20               21               22               23               24               25               26               27               28               29
//                                                    30               31               32               33               34               35                
//             >;
//         };

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        // left mod-tap
        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            // quick-tap-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        // right mod-tap
        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            // quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        // left layer-tap
        llt: llt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            // quick-tap-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        // right layer-tap
        rlt: rlt {
            comlatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            // quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        // layer-tap with quick tap
        ltqt: ltqt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            // quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base { // 0
            bindings = <
&kp Q               &kp W               &kp E               &kp R               &kp T               &kp Y               &kp U               &kp I               &kp O               &kp P
&lmt LCTRL A        &lmt LALT S         &lmt LGUI D         &lmt LSHIFT F       &kp G               &kp H               &rmt LSHIFT J       &rmt LGUI K         &rmt LALT L         &rmt LCTRL SQT
&kp Z               &kp X               &kp C               &kp V               &kp B               &kp N               &kp M               &kp COMMA           &kp DOT             &kp FSLH      
                                        &ltqt 5 TAB         &ltqt 1 SPACE       &ltqt 6 ESC         &ltqt 4 RET         &ltqt 2 BSPC        &caps_word    
            >;
        };

        // mod-taps on left
        space_l { // 1
            bindings = <
&kp GRAVE           &kp N7              &kp N8              &kp N9              ___                 ___                 ___                 &kp LPAR            &kp RPAR            ___
&lmt LCTRL EQUAL    &lmt LALT N4        &lmt LGUI N5        &llt 3 N6           &kp MINUS           &kp LEFT            &kp DOWN            &kp UP              &kp RIGHT           &kp SEMI       
___                 &kp N1              &kp N2              &kp N3              ___                 ___                 ___                 &kp LBKT            &kp RBKT            &kp BSLH
                                        ___                 &kp N0              ___                 ___                 &kp DEL             ___              
            >;
        };

        // mod-taps on right
        // TODO use rlt instead of rmt
        backspace_l { // 2
            bindings = <
&kp GRAVE           &kp N7              &kp N8              &kp N9              ___                 ___                 ___                 &kp LPAR            &kp RPAR            ___
&kp EQUAL           &kp N4              &kp N5              &kp N6              &kp MINUS           &kp LEFT            &rmt LSHIFT DOWN    &rmt LGUI UP        &rmt LALT RIGHT     &rmt LCTRL SEMI
___                 &kp N1              &kp N2              &kp N3              ___                 ___                 ___                 &kp LBKT            &kp RBKT            &kp BSLH
                                        ___                 &kp N0              ___                 ___                 &kp DEL             ___              
            >;
        };

        // use shifted layer instead of mod-morph because of karabiner issue with mod-morphs
        space_l_shifted { // 3
            bindings = <
&kp TILDE           &kp AMPS            &kp STAR            &kp LPAR            ___                 ___                 ___                 &kp LT              &kp GT              ___
&lmt LCTRL PLUS     &lmt LALT DLLR      &lmt LGUI PRCNT     &lmt LSHIFT CARET   &kp UNDER           &kp HOME            &rmt LSHIFT PG_DN   &rmt LGUI PG_UP     &rmt LALT END       &rmt LCTRL COLON
___                 &kp EXCL            &kp AT              &kp HASH            ___                 ___                 ___                 &kp LBRC            &kp RBRC            &kp PIPE
                                        ___                 &kp RPAR            ___                 ___                 &kp LS(DEL)         ___              
            >;
        };

        fun { // 4
            bindings = <
&kp F12             &kp F7              &kp F8              &kp F9              ___                 ___                 ___                 ___                 ___                 ___              
&kp F11             &kp F4              &kp F5              &kp F6              ___                 ___                 ___                 ___                 ___                 ___              
&kp F10             &kp F1              &kp F2              &kp F3              ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        med { // 5
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &kp C_PREV          &kp C_VOL_DN        &kp C_VOL_UP        &kp C_NEXT          ___              
___                 ___                 ___                 ___                 ___                 &kp C_PP            &kp C_BRI_DN        &kp C_BRI_UP        &kp C_MUTE          ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        mouse { // 6
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &mmv MOVE_LEFT      &mmv MOVE_DOWN      &mmv MOVE_UP        &mmv MOVE_RIGHT     ___              
___                 ___                 ___                 ___                 ___                 &msc SCRL_LEFT      &msc SCRL_UP        &msc SCRL_DOWN      &msc SCRL_RIGHT     ___              
                                        ___                 ___                 ___                 &mkp RCLK           &mkp LCLK           &mkp MCLK
            >;
        };

        empty {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };
    };
};
