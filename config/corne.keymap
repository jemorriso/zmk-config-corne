/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lhr: lhr {
            compatible = "zmk,behavior-hold-tap";
            label = "LHR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 13 14 15 16 37 36 38>;
        };

        rhr: rhr {
            compatible = "zmk,behavior-hold-tap";
            label = "RHR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22 39 41 40>;
        };

        lhsft: lhsft {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 13 14 15 16>;
        };

        rhsft: rhsft {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22>;
        };

        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        ltqt: lt_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&none>;
            key-positions = <2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&trans  &kp Q         &lhr LA(LCTRL) W  &lhr LG(LCTRL) E  &kp R           &kp T          &kp Y        &kp U           &rhr LG(LCTRL) I  &rhr LA(LCTRL) O  &kp P           &trans
&trans  &lhr LCTRL A  &lhr LALT S       &lhr LGUI D       &lhsft LSHFT F  &kp G          &kp H        &rhsft LSHFT J  &rhr LGUI K       &rhr LALT L       &rhr LCTRL SQT  &trans
&trans  &kp Z         &kp X             &kp C             &kp V           &kp B          &kp N        &kp M           &kp COMMA         &kp DOT           &kp FSLH        &trans
                                        &trans            &ltqt 1 SPACE   &ltqt 2 TAB    &ltqt 2 RET  &ltqt 1 BSPC    &trans
            >;
        };

        num_sym {
            bindings = <
&trans  &kp GRAVE      &lhr LA(LCTRL) N7  &lhr LG(LCTRL) N8  &kp N9         &trans    &trans        &kp LS(PLUS)      &rhr LG(LCTRL) LS(LPAR)  &rhr LA(LCTRL) LS(RPAR)  &kp EQUAL        &trans
&trans  &lhr LCTRL N0  &lhr LALT N4       &lhr LGUI N5       &lhr LSHFT N6  &trans    &kp LS(PIPE)  &rhr LSHFT MINUS  &rhr LGUI LBKT           &rhr LALT RBKT           &rhr LCTRL SEMI  &trans
&trans  &kp LS(TILDE)  &kp N1             &kp N2             &kp N3         &trans    &kp BSLH      &kp LS(UNDER)     &kp LS(LBRC)             &kp LS(RBRC)             &kp LS(COLON)    &trans
                                          &trans             &kp ESC        &trans    &trans        &kp ESC           &trans
            >;
        };

        sym_nav {
            bindings = <
&trans  &trans               &lhr LA(LCTRL) LS(AMPS)  &lhr LG(LCTRL) LS(STAR)  &kp LS(LPAR)          &trans    &trans    &trans           &trans        &trans           &trans  &trans
&trans  &lhr LCTRL LS(RPAR)  &lhr LALT LS(DLLR)       &lhr LGUI LS(PRCNT)      &lhr LSHFT LS(CARET)  &trans    &kp LEFT  &rhr LSHFT DOWN  &rhr LGUI UP  &rhr LALT RIGHT  &trans  &trans
&trans  &trans               &kp LS(EXCL)             &kp LS(AT)               &kp LS(POUND)         &trans    &kp HOME  &kp PG_DN        &kp PG_UP     &kp END          &trans  &trans
                                                      &trans                   &trans                &trans    &trans    &trans           &trans
            >;
        };

        fun_med {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans      &trans        &trans        &trans      &trans  &trans
&trans  &kp F10  &kp F4  &kp F5  &kp F6  &trans    &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &trans  &trans
&trans  &kp F11  &kp F1  &kp F2  &kp F3  &trans    &kp C_MUTE  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PP    &trans  &trans
                         &trans  &trans  &trans    &trans      &trans        &trans
            >;
        };

        space {
            bindings = <
&trans  &kp N1    &kp N2   &kp N3   &kp N4   &kp N5    &kp N6      &kp N7        &kp N8        &kp N9      &kp N0  &trans
&trans  &kp grave &kp lbrc &kp lbkt &kp lpar &trans    &kp left    &kp down      &kp up        &kp right   &trans  &trans
&trans  &trans    &kp rbrc &kp rbkt &kp rpar &trans    &trans      &kp minus     &kp equal     &kp bslh    &trans  &trans
                         &trans  &trans  &trans    &trans      &trans        &trans
            >;
        };

        num_row {
            bindings = <
&trans  &kp grave &kp lbrc &kp lbkt &kp lpar &trans    &kp left    &kp down      &kp up        &kp right   &trans  &trans
&trans  &kp N1    &kp N2   &kp N3   &kp N4   &kp N5    &kp N6      &kp N7        &kp N8        &kp N9      &kp N0  &trans
&trans  &trans    &kp rbrc &kp rbkt &kp rpar &trans    &trans      &kp minus     &kp equal     &kp bslh    &trans  &trans
                         &trans  &trans  &trans    &trans      &trans        &trans
            >;
        };
    };
};
