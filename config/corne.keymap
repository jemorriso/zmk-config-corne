/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"

#define DEF 0  // layer shortcuts, must match order in which they are defined below
#define NAV 1
#define NUM 2
#define CMDTABL 3
#define CTRLTABL 4
#define WARP 5

#include "includes/combos.dtsi" // needs to be below layer defines

#define XXX &none
#define ___ &trans
#define MEH LC(LA(LSHIFT))
#define HYPER LG(LC(LA(LSHIFT)))

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Caps-word, num-word and smart-mouse */

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_BEHAVIOR(smart_num, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_BEHAVIOR(num_dance, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

/* Custom behaviors */

// Alt+Tab swapper, requires PR #1366
// ZMK_BEHAVIOR(swapper, tri_state,
//     bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
//     ignored-key-positions = <RM1>;
//     ignored-layers = <0 1 2 3>;
// )
//
// ZMK_BEHAVIOR(gswapper, tri_state,
//     bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
//     ignored-key-positions = <RM1>;
// )
//
// ZMK_BEHAVIOR(cswapper, tri_state,
//     bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
//     ignored-key-positions = <RM1>;
// )
//
// ZMK_BEHAVIOR(tab_macro, macro,
//     wait-ms = <100>;
//     tap-ms = <5>;
//     bindings = <&tog TABL &kp U &tog TABL>;
// )
//

ZMK_BEHAVIOR(cmd_grave, macro,
    wait-ms = <10>;
    tap-ms = <5>;
    bindings = <&tog CMDTABL &kp LG(GRAVE)>;
)

ZMK_BEHAVIOR(cmd_tab, macro,
    wait-ms = <10>;
    tap-ms = <5>;
    bindings = <&tog CMDTABL &kp LG(BSPC)>;
)

ZMK_BEHAVIOR(ctaboff, macro,
    wait-ms = <10>;
    tap-ms = <5>;
    bindings = <&tog CMDTABL &kp SPACE>;
)

ZMK_BEHAVIOR(ctrl_tab, macro,
    wait-ms = <10>;
    tap-ms = <5>;
    bindings = <&tog CTRLTABL &kt LCTRL &kp TAB>;
)

ZMK_BEHAVIOR(cttaboff, macro,
    wait-ms = <10>;
    tap-ms = <5>;
    bindings = <&tog CTRLTABL &kt LCTRL>;
)

ZMK_BEHAVIOR(warp_on, macro,
    wait-ms = <10>;
    tap-ms = <5>;
    bindings = <&tog WARP &kp LG(LA(C))>;
)

ZMK_BEHAVIOR(warp_off, macro,
    wait-ms = <10>;
    tap-ms = <5>;
    bindings = <&tog WARP &kp ESC>;
)

// ZMK_BEHAVIOR(rcmd_on, macro,
//     wait-ms = <10>;
//     tap-ms = <5>;
//     bindings = <&tog RCMD>;
// )
//
// ZMK_BEHAVIOR(rcmd_off, macro,
//     wait-ms = <10>;
//     tap-ms = <5>;
//     bindings = <&tog RCMD &kp ESC>;
// )

ZMK_BEHAVIOR(rcmd, macro_one_param,
    wait-ms = <80>;
    tap-ms = <15>;
    // bindings = <&kt LG(LC(LSHFT))>, <&macro_param_1to1 &kp MACRO_PLACEHOLDER>, <&kt LG(LC(LSHFT))>;
    bindings = <&kt RGUI>, <&macro_param_1to1 &kp MACRO_PLACEHOLDER>, <&kt RGUI>;
)


ZMK_BEHAVIOR(rcmd2, macro_one_param,
    wait-ms = <80>;
    tap-ms = <15>;
    // bindings = <&kt LG(LC(LSHFT))>, <&macro_param_1to1 &kp MACRO_PLACEHOLDER>, <&kt LG(LC(LSHFT))>;
    bindings = <&kt RGUI>, <&macro_param_1to1 &kp MACRO_PLACEHOLDER>, <&kt RGUI>;
)

// ZMK_BEHAVIOR(swap_macro, macro,
//     wait-ms = <100>;
//     tap-ms = <5>;
//     bindings = <&tog TABL &swapper>;
// )

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

ZMK_BEHAVIOR(dcol, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

ZMK_BEHAVIOR(csemi, mod_morph,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

/* keymap */

ZMK_LAYER(default_layer,
     // ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
        &cmd_grave &kp Q         &hml HYPER W  &hml MEH F    &kp P         &kp B             &kp J         &kp L         &hmr MEH U    &hmr HYPER Y  &kp SQT         ___
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        &cmd_tab   &hml LCTRL A  &hml LALT R   &hml LGUI S   &hml LSHFT T  &kp G             &kp M         &hmr LSHFT N  &hmr LGUI E   &hmr LALT I   &hmr LCTRL O    &kp RGUI
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        &ctrl_tab  &kp Z         &kp X         &kp C         &kp D         &kp V             &kp K         &kp H         &csemi        &dcol         &qexcl          ___
     // ╰──────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰──────╯
                                               &warp_on      &lt NAV SPACE &kp TAB           &bs_del       &smart_shft   SMART_NUM
     //                                      ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(nav_layer,
     // ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
          ___      ___           &sk HYPER     &sk MEH       ___           ___               &kp HOME      &kp PG_DN     &kp PG_UP     &kp END       &kp INS         ___
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
          ___      &sk LCTRL     &sk LALT      &sk LGUI      &sk LSHFT     ___               &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &kp DEL         ___
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
          ___      ___           ___           ___           ___           ___               ___           ___           ___           ___           ___             ___
     // ╰──────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰──────╯
                                               ___           ___           ___               ___           ___           ___
     //                                      ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,
     // ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
          ___      ___           &kp N7        &kp N8        &kp N9        ___               ___           ___           &sk MEH       &sk HYPER     ___             ___
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
          ___      &kp N0        &kp N4        &kp N5        &kp N6        ___               ___           &sk LSHFT     &sk LGUI      &sk LALT      &sk LCTRL       ___
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
          ___      ___           &kp N1        &kp N2        &kp N3        ___               ___           ___           ___           ___           ___             ___
     // ╰──────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰──────╯
                                               ___           ___           ___               ___           ___           ___
     //                                      ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(cmd_tab_layer,
     // ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
        &kp RIGHT  &kp LEFT      &kp W         &kp F         &ctaboff      &ctaboff          &ctaboff      &ctaboff      &ctaboff      &ctaboff      &ctaboff        &ctaboff
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        &kp RIGHT  &kp LEFT      &ctaboff      &kp S         &ctaboff      &ctaboff          &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &ctaboff        &ctaboff
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        &ctaboff   &ctaboff      &ctaboff      &ctaboff      &ctaboff      &ctaboff          &ctaboff      &ctaboff      &ctaboff      &ctaboff      &ctaboff        &ctaboff
     // ╰──────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰──────╯
                                               &ctaboff      &ctaboff      &ctaboff          &ctaboff      &ctaboff      &ctaboff
     //                                      ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(ctrl_tab_layer,
     // ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
        &cttaboff  &cttaboff     &cttaboff     &cttaboff     &cttaboff     &cttaboff         &cttaboff     &cttaboff     &cttaboff     &cttaboff     &cttaboff       &cttaboff
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        &cttaboff  &cttaboff     &cttaboff     &cttaboff     &cttaboff     &cttaboff         &cttaboff     &cttaboff     &cttaboff     &cttaboff     &cttaboff       &cttaboff
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        &kp TAB    &kp LS(TAB)   &cttaboff    &cttaboff     &cttaboff     &cttaboff         &cttaboff     &cttaboff     &cttaboff     &cttaboff     &cttaboff       &cttaboff
     // ╰──────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰──────╯
                                               &cttaboff     &cttaboff     &cttaboff         &cttaboff     &cttaboff     &cttaboff
     //                                      ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(warp_layer,
     // ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
          ___      ___           ___           ___           ___           ___               ___           ___           ___           ___           ___             ___
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
          ___      ___           ___           ___           ___           ___               ___           &kp N         &kp E         &kp I         ___             ___
     // ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
          ___      ___           ___           ___           ___           ___               ___           ___           ___           ___           ___             ___
     // ╰──────╯ ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╰──────╯
                                               &warp_off     &kp SPACE     ___               &kp RET       &kp BSPC      &kp DEL
     //                                      ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)
/* vim: set ft=c tw=174: */



