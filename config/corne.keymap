/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>

#define ___ &trans

/ {
    macros {
        mouseless: mouseless {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_press &kp LGUI>
                , <&macro_tap &kp O>
                , <&macro_release &kp LGUI>
                , <&macro_release &kp LCTRL>
                ;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
//        combo_repeat {
//            timeout-ms = <40>;
//            key-positions = <22 23>;
//            bindings = <&key_repeat>;
//        };
//        combo_med {
//            timeout-ms = <40>;
//            key-positions = <3 13>;
//            bindings = <&mo 7>;
//        };
        combo_cut {
            timeout-ms = <40>;
            key-positions = <20 21>;
            bindings = <&kp LG(X)>;
        };
        combo_copy {
            timeout-ms = <40>;
            key-positions = <21 22>;
            bindings = <&kp LG(C)>;
        };
        combo_paste {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&kp LG(V)>;
        };
        combo_cw {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&caps_word>;
        };
        combo_caps {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp CAPS>;
        };
    };
};

//         empty {
//             bindings = <
// 0                1                2                3                4                5                6                7                8                9
// 10               11               12               13               14               15               16               17               18               19
// 20               21               22               23               24               25               26               27               28               29
//                                                    30               31               32               33               34               35                
//             >;
//         };

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        llt: left_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rlt: right_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        // lt: layer_tap is default behavior, we make a blt to avoid overriding it ðŸ¥ª
        blt: balanced_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        lmt_rpi: left_mod_tap_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt_rpi: right_mod_tap_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp Q               &kp W               &llt 3 F            &kp P               &kp B               &kp J               &kp L               &rlt 3 U            &kp Y               &kp SQT
&lmt_rpi LCTRL A    &lmt_rpi LALT R     &lmt_rpi LGUI S     &lmt LSHIFT T       &kp G               &kp M               &rmt LSHIFT N       &rmt_rpi LGUI E     &rmt_rpi LALT I     &rmt_rpi LCTRL O
&kp Z               &kp X               &kp C               &kp D               &kp V               &kp K               &kp H               &kp COMMA           &kp DOT             &kp FSLH
                                        &blt 6 TAB          &blt 2 SPACE        &blt 5 ESC          &blt 4 RET          &blt 1 BSPC         &kp DEL
            >;
        };

        num {
            bindings = <
&kp GRAVE           &kp N7              &kp N8              &kp N9              ___                 ___                 &kp MINUS           &kp LPAR            &kp RPAR            &kp EQUAL
&kp N0              &kp N4              &kp N5              &kp N6              ___                 ___                 &rmt LSHIFT COLON   &rmt LGUI LBKT      &rmt LALT RBKT      &rmt LCTRL SEMI
&kp PIPE            &kp N1              &kp N2              &kp N3              ___                 ___                 &kp UNDER           &kp LBRC            &kp RBRC            &kp PLUS
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };


        nav {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &kp LEFT            &kp DOWN            &kp UP              &kp RIGHT           ___              
___                 ___                 ___                 ___                 ___                 &kp HOME            &kp PG_DN           &kp PG_UP           &kp END             ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        sym {
            bindings = <
&kp GRAVE           &kp AMPS            &kp STAR            &kp TILDE           ___                 ___                 &kp MINUS           &kp LPAR            &kp RPAR            &kp EQUAL
&lmt LCTRL BSLH     &lmt LALT DLLR      &lmt LGUI PRCNT     &lmt LSHIFT CARET   ___                 ___                 &rmt LSHIFT COLON   &rmt LGUI LBKT      &rmt LALT RBKT      &rmt LCTRL SEMI
&kp PIPE            &kp EXCL            &kp AT              &kp HASH            ___                 ___                 &kp UNDER           &kp LBRC            &kp RBRC            &kp PLUS
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        fun {
            bindings = <
&kp F12             &kp F7              &kp F8              &kp F9              ___                 ___                 ___                 ___                 ___                 ___              
&kp F11             &kp F4              &kp F5              &kp F6              ___                 ___                 ___                 ___                 ___                 ___              
&kp F10             &kp F1              &kp F2              &kp F3              ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        mouse {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 &mouseless          &kp LG(LC(F))       &kp LG(LC(D))       ___
___                 ___                 ___                 ___                 ___                 &mmv MOVE_LEFT      &mmv MOVE_DOWN      &mmv MOVE_UP        &mmv MOVE_RIGHT     ___              
___                 ___                 ___                 ___                 ___                 &msc SCRL_LEFT      &msc SCRL_UP        &msc SCRL_DOWN      &msc SCRL_RIGHT     &kp LG(LC(FSLH)) 
                                        ___                 ___                 ___                 &mkp RCLK           &mkp LCLK           &mkp MCLK
            >;
        };

        med {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &kp C_PREV          &kp C_VOL_DN        &kp C_VOL_UP        &kp C_NEXT          ___              
___                 ___                 ___                 ___                 ___                 &kp C_PP            &kp C_BRI_DN        &kp C_BRI_UP        &kp C_MUTE          ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        empty {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };
    };
};
