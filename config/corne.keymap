/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lhr: lhr {
            compatible = "zmk,behavior-hold-tap";
            label = "LHR";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 20 9 10 11 21 22 23 33 34 35 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        rhr: rhr {
            compatible = "zmk,behavior-hold-tap";
            label = "RHR";
            bindings = <&mt>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        }; 
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&trans  &kp Q         &rpi LA(LCTRL) W  &rpi LG(LCTRL) E  &kp R         &kp T        &kp Y      &kp U         &rpi LG(LCTRL) I  &rpi LA(LCTRL) O  &kp P           &trans
&trans  &rpi LCTRL A  &rpi LALT S       &rpi LGUI D       &rpi LSHFT F  &kp G        &kp H      &rpi LSHFT J  &rpi LGUI K       &rpi LALT L       &rpi LCTRL SQT  &trans
&trans  &kp Z         &kp X             &kp C             &kp V         &kp B        &kp N      &kp M         &kp COMMA         &kp DOT           &kp FSLH        &trans
                                        &trans            &lt 1 SPACE   &lt 2 TAB    &lt 2 RET  &lt 1 BSPC    &trans
            >;
        };

        num_sym {
            bindings = <
&trans  &kp GRAVE      &kp N7  &kp N8  &kp N9  &trans    &trans        &kp LS(PLUS)   &kp LS(LPAR)  &kp LS(RPAR)  &kp EQUAL      &trans
&trans  &kp N0         &kp N4  &kp N5  &kp N6  &trans    &kp LS(PIPE)  &kp MINUS      &kp LBKT      &kp RBKT      &kp SEMI       &trans
&trans  &kp LS(TILDE)  &kp N1  &kp N2  &kp N3  &trans    &kp BSLH      &kp LS(UNDER)  &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(COLON)  &trans
                               &trans  &kp ESC &trans    &trans        &kp ESC        &trans
            >;
        };

        sym_nav {
            bindings = <
&trans  &trans        &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &trans    &trans    &trans     &trans     &trans     &trans  &trans
&trans  &kp LS(RPAR)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans  &trans
&trans  &trans        &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &trans  &trans
                                    &trans         &trans         &trans    &trans    &trans     &trans
            >;
        };

        fun_med {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans      &trans        &trans        &trans      &trans  &trans
&trans  &kp F10  &kp F4  &kp F5  &kp F6  &trans    &kp C_PREV  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &trans  &trans
&trans  &kp F11  &kp F1  &kp F2  &kp F3  &trans    &kp C_MUTE  &kp C_BRI_DN  &kp C_BRI_UP  &kp C_PP    &trans  &trans
                         &trans  &trans  &trans    &trans      &trans        &trans
            >;
        };
    };
};
