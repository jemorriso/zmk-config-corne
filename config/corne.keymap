/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define ___ &trans

#define MEH LA(LC(LSHFT))
#define HYPER LA(LC(LG(LSHFT)))
#define RAY LA(LC(LGUI))
#define LAUNCH LA(LG(LSHFT))

#define LAUNCHPAD LA(LC(LG(LS(F3))))
#define SPOTLIGHT LA(LC(LG(LS(F4))))
#define DICTATION LA(LC(LG(LS(F5))))
#define DO_NOT_DISTURB LA(LC(LG(LS(F6))))

/ {
    macros {
        warpd_hint: warpd_hint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp LG(LC(X))>;
        };

        warpd_on: warpd_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp LG(LC(C))>;
        };

        warpd_grid: warpd_grid {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp LG(LC(G))>;
        };

        warpd_hist: warpd_hist {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp LG(LC(H))>;
        };

        warpd_screen: warpd_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp LG(LC(S))>;
        };

        warpd_1shot: warpd_1shot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp LG(LC(L))>;
        };

        warpd_off: warpd_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp ESC>;
        };

        warpd_macro: warpd_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&tog 6 &kp LG(LC(C))>
                , <&macro_pause_for_release>
                , <&tog 6 &kp ESC>
                ;
        };
    };
};

/ {
    behaviors {
        lhhr: lhhr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhhr: rhhr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        lhhr_rpi: lhhr_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhhr_rpi: rhhr_rpi {
            compatible = "zmk,behavior-hold-tap";
            label = "RHHR_RPI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        lhlt: lhlt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhlt: rhlt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        lhlt_rpi: lhlt_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhlt_rpi: rhlt_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        ltqt: lt_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        warpd_lt: warpd_lt {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&warpd_macro>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_caps_word {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&caps_word>;
        };
        combo_caps_lock {
            timeout-ms = <40>;
            key-positions = <26 28>;
            bindings = <&kp CAPS>;
        };
        combo_superkey {
            timeout-ms = <40>;
            key-positions = <37 40>;
            bindings = <&kp RCTRL>;
            slow-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
___ &kp Q               &kp W               &kp E               &kp R               &kp T               &kp Y               &kp U               &kp I               &kp O               &kp P               ___
___ &lhhr_rpi LCTRL A   &lhhr_rpi LALT S    &lhhr_rpi LGUI D    &lhhr LSHFT F       &kp G               &kp H               &rhhr LSHFT J       &rhhr_rpi LGUI K    &rhhr_rpi LALT L    &rhhr_rpi LCTRL SEMI ___
&tog 1 &lhhr_rpi RAY Z     &lhlt_rpi 5 X       &lhhr_rpi LAUNCH C  &lhhr_rpi MEH V     &kp B               &kp N               &rhhr_rpi MEH M     &rhhr_rpi LAUNCH COMMA &rhlt_rpi 5 DOT  &rhhr_rpi RAY FSLH  ___
                                            &ltqt 4 ESC         &ltqt 3 SPACE       &warpd_lt 0 TAB     &kp RET             &ltqt 2 BSPC        &kp SQT
            >;
        };

        base_test {
            bindings = <
___ &kp Q               &kp W               &kp E               &kp R               &kp T               &kp Y               &kp U               &kp I               &kp O               &kp P               ___
___ &lhhr_rpi LCTRL A   &lhhr_rpi LALT S    &lhhr_rpi LGUI D    &lhhr LSHFT F       &kp G               &kp H               &rhhr LSHFT J       &rhhr_rpi LGUI K    &rhhr_rpi LALT L    &rhhr_rpi LCTRL SEMI ___
___ &lhhr_rpi RAY Z     &lhlt_rpi 5 X       &lhhr_rpi LAUNCH C  &lhhr_rpi MEH V     &kp B               &kp N               &rhhr_rpi MEH M     &rhhr_rpi LAUNCH COMMA &rhlt_rpi 5 DOT  &rhhr_rpi RAY FSLH  ___
                                            &kp ESC             &ltqt 7 SPACE       &warpd_lt 0 TAB     &kp RET             &ltqt 7 BSPC        &kp SQT
            >;
        };

        num_sym {
            bindings = <
___ &kp EXCL            &kp N7              &kp N8              &kp N9              &kp PRCNT           &kp CARET           &kp AMPS            &kp LPAR            &kp RPAR            &kp PIPE            ___
___ &lhhr LCTRL N0      &lhhr LALT N4       &lhhr LGUI N5       &lhhr LSHFT N6      &kp HASH            &kp STAR            &rhhr LSHFT MINUS   &rhhr LGUI LBKT     &rhhr LALT RBKT     &rhhr LCTRL BSLH    ___
___ &kp TILDE           &kp N1              &kp N2              &lhhr MEH N3        &kp DLLR            &kp PLUS            &rhhr MEH EQUAL     &kp LBRC            &kp RBRC            ___                 ___
                                            &kp AT              &kp UNDER           &kp GRAVE           ___                 ___                 ___   
            >;
        };

        sym_nav {
            bindings = <
___ ___                 &kp AMPS            &kp STAR            ___                 ___                 ___                 ___                 &caps_word          &kp CAPS            ___                 ___
___ ___                 &lhhr LALT DLLR     &lhhr LGUI PRCNT    &lhhr LSHFT CARET   ___                 &kp LEFT            &rhhr LSHFT DOWN    &rhhr LGUI UP       &rhhr LALT RIGHT    ___                 ___
___ ___                 &kp EXCL            &kp AT              &lhhr MEH HASH      ___                 &kp HOME            &rhhr MEH PG_DN     &kp PG_UP           &kp END             ___                 ___
                                            ___                 ___                 ___                 ___                 &kp DEL             ___   
            >;
        };

        fun_med {
            bindings = <
___ &kp F12             &kp F7              &kp F8              &kp F9              ___                 ___                 &kp LAUNCHPAD       &kp SPOTLIGHT       &kp DICTATION       &kp DO_NOT_DISTURB  ___
___ &lhhr LCTRL F10     &lhhr LALT F4       &lhhr LGUI F5       &lhhr LSHFT F6      ___                 &kp C_PREV          &kp C_VOL_DN        &kp C_VOL_UP        &kp C_NEXT          ___                 ___
___ &kp F11             &kp F1              &kp F2              &lhhr MEH F3        ___                 &kp C_MUTE          &kp C_BRI_DN        &kp C_BRI_UP        &kp C_PP            ___                 ___
                                            ___                 ___                 ___                 ___                 ___                 ___   
            >;
        };

        to_warpd {
            bindings = <
___ ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
___ ___                 &warpd_screen       ___                 ___                 &warpd_grid         &warpd_hist         ___                 ___                 &warpd_1shot        ___                 ___
___ ___                 &warpd_hint         &warpd_on           ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
                                            ___                 ___                 ___                 ___                 ___                 ___   
            >;
        };

        warpd {
            bindings = <
___ ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
___ ___                 ___                 ___                 ___                 ___                 &kp H               &kp J               &kp K               &kp L               ___                 ___
___ ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
                                            &warpd_off          ___                 ___                 ___                 ___                 ___   
            >;
        };

        space {
            bindings = <
___ &kp N9              &kp N7              &kp N8              &kp N9              &kp N0              ___                 ___                 ___                 ___                 ___                 ___
___ &lhhr LCTRL EQUAL   &lhhr LALT N4       &lhhr LGUI N5       &lhhr LSHFT N6      &kp MINUS           &kp LEFT            &rhhr LSHFT DOWN    &rhhr LGUI UP       &rhhr LALT RIGHT    ___                 ___
___ &kp LBKT            &kp N1              &kp N2              &lhhr MEH N3        &kp RBKT            &kp HOME            &rhhr MEH PG_DN     &kp PG_UP           &kp END             ___                 ___
                                            &kp BSLH            &kp N0              &kp GRAVE           ___                 &caps_word          &kp CAPS
            >;
        };

        empty {
            bindings = <
___ ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
___ ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
___ ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___
                                            ___                 ___                 ___                 ___                 ___                 ___   
            >;
        };
    };
};
