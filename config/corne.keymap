#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10
#define ___ &trans

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/bt.h>

/ {
    macros {
        /* mouseless: mouseless { */
        /*     compatible = "zmk,behavior-macro"; */
        /*     #binding-cells = <0>; */
        /*     bindings */
        /*         = <&macro_press &kp LCTRL> */
        /*         , <&macro_press &kp LGUI> */
        /*         , <&macro_tap &kp O> */
        /*         , <&macro_release &kp LGUI> */
        /*         , <&macro_release &kp LCTRL> */
        /*         ; */
        /* }; */
        mmv_nw: mmv_nw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_UP &mmv MOVE_LEFT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_UP &mmv MOVE_LEFT>
                ;
        };
        mmv_ne: mmv_ne {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_UP &mmv MOVE_RIGHT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_UP &mmv MOVE_RIGHT>
                ;
        };
        mmv_sw: mmv_sw {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_DOWN &mmv MOVE_LEFT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_DOWN &mmv MOVE_LEFT>
                ;
        };
        mmv_se: mmv_se {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &mmv MOVE_DOWN &mmv MOVE_RIGHT>
                , <&macro_pause_for_release>
                , <&macro_release &mmv MOVE_DOWN &mmv MOVE_RIGHT>
                ;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_repeat {
            timeout-ms = <40>;
            key-positions = <1 2>;
            bindings = <&key_repeat>;
        };
        combo_repeat2 {
            timeout-ms = <40>;
            key-positions = <7 8>;
            bindings = <&key_repeat>;
        };
        combo_med {
            timeout-ms = <40>;
            key-positions = <22 23>;
            bindings = <&mo 6>;
        };
        combo_mouse {
            timeout-ms = <40>;
            key-positions = <3 13>;
            bindings = <&mo 5>;
        };
        combo_cw {
            timeout-ms = <40>;
            key-positions = <26 27>;
            bindings = <&caps_word>;
        };
        combo_caps {
            timeout-ms = <40>;
            key-positions = <27 28>;
            bindings = <&kp CAPS>;
        };
    };
};

//         empty {
//             bindings = <
// 0                1                2                3                4                5                6                7                8                9
// 10               11               12               13               14               15               16               17               18               19
// 20               21               22               23               24               25               26               27               28               29
//                                                    30               31               32               33               34               35                
//             >;
//         };

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        llt: left_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rlt: right_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        lmt_noqt: left_mod_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt_noqt: right_mod_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        llt_noqt: left_layer_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rlt_noqt: right_layer_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        // lt: layer_tap is default behavior, we make a blt to avoid overriding it ðŸ¥ª
        blt: balanced_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        blt_noqt: balanced_layer_tap_no_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&kp>;
        };

        hplt: hold_preferred_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        lmt_rpi: left_mod_tap_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        rmt_rpi: right_mod_tap_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        // TODO: this is not working
        qsc: quick_scroll {
            compatible = "zmk,behavior-input-two-axis";
            #binding-cells = <1>;
            x-input-code = <INPUT_REL_HWHEEL>;
            y-input-code = <INPUT_REL_WHEEL>;
            time-to-max-speed-ms = <0>; // always at max speed
            acceleration-exponent = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp Q               &kp W               &llt_noqt 1 F       &kp P               &kp B               &kp J               &kp L               &rlt_noqt 1 U       &kp Y               &kp SQT
&lmt_rpi LCTRL A    &lmt_rpi LALT R     &lmt_rpi LGUI S     &lmt_noqt LSHIFT T  &kp G               &kp M               &rmt_noqt LSHIFT N  &rmt_rpi LGUI E     &rmt_rpi LALT I     &rmt_rpi LCTRL O
&kp Z               &kp X               &kp C               &kp D               &kp V               &kp K               &kp H               &kp COMMA           &kp DOT             &kp FSLH
                                        ___                 &blt 3 SPACE        &hplt 5 ESC         &blt 4 RET          &blt 2 BSPC         ___
            >;
        };

        sym {
            bindings = <
&kp GRAVE           &kp AMPS            &kp STAR            &kp TILDE           &kp EQUAL           &kp PLUS            &kp SEMI            &kp LPAR            &kp RPAR            &kp DQT
&lmt LCTRL PIPE     &lmt LALT DLLR      &lmt LGUI PRCNT     &lmt LSHIFT CARET   &kp MINUS           &kp UNDER           &rmt LSHIFT LBRC    &rmt LGUI LBKT      &rmt LALT RBKT      &rmt LCTRL RBRC
&kp BSLH            &kp EXCL            &kp AT              &kp HASH            ___                 ___                 &kp COLON           &kp LT              &kp GT              &kp QMARK
                                        ___                 ___                 ___                 ___                 ___                 ___
            >;
        };

        num {
            bindings = <
&kp GRAVE           &kp N7              &kp N8              &kp N9              &kp EQUAL           &kp PLUS            &kp SEMI            &kp LPAR            &kp RPAR            &kp DQT
&lmt LCTRL N0       &lmt LALT N4        &lmt LGUI N5        &lmt LSHIFT N6      &kp MINUS           &kp UNDER           &rmt LSHIFT LBRC    &rmt LGUI LBKT      &rmt LALT RBKT      &rmt LCTRL RBRC
&kp BSLH            &kp N1              &kp N2              &kp N3              ___                 ___                 &kp COLON           &kp LT              &kp GT              &kp QMARK
                                        ___                 ___                 ___                 ___                 ___                 ___
            >;
        };

        nav {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 &kp TAB             &kp LS(TAB)         ___
___                 ___                 ___                 ___                 ___                 &kp LEFT            &kp DOWN            &kp UP              &kp RIGHT           &kp DEL          
___                 ___                 ___                 ___                 ___                 &kp HOME            &kp PG_DN           &kp PG_UP           &kp END             ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        fun {
            bindings = <
&kp F12             &kp F7              &kp F8              &kp F9              ___                 ___                 ___                 ___                 ___                 ___
&kp F11             &kp F4              &kp F5              &kp F6              ___                 ___                 ___                 ___                 ___                 ___
&kp F10             &kp F1              &kp F2              &kp F3              ___                 ___                 ___                 ___                 ___                 ___
                                        ___                 ___                 ___                 ___                 ___                 ___
            >;
        };

        mouse {
            bindings = <
___                 ___                 ___                 ___                 ___                 &mmv_nw             &mmv_sw             &mmv_ne             &mmv_se             &mkp MB5
___                 ___                 ___                 ___                 ___                 &mmv MOVE_LEFT      &mmv MOVE_DOWN      &mmv MOVE_UP        &mmv MOVE_RIGHT     &mkp MB4
___                 ___                 ___                 ___                 ___                 &msc SCRL_RIGHT     &msc SCRL_UP        &msc SCRL_DOWN      &msc SCRL_LEFT      &mkp MCLK
                                        ___                 ___                 ___                 &mkp RCLK           &mkp LCLK           ___
            >;
        };

        med {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 &kp C_PREV          &kp C_VOL_DN        &kp C_VOL_UP        &kp C_NEXT          ___              
___                 ___                 ___                 ___                 ___                 &kp C_PP            &kp C_BRI_DN        &kp C_BRI_UP        &kp C_MUTE          ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };

        empty {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___              
                                        ___                 ___                 ___                 ___                 ___                 ___              
            >;
        };
    };
};
