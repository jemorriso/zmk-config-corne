/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lhr: lhr {
            compatible = "zmk,behavior-hold-tap";
            label = "LHR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 13 14 15 16 37 36 38>;
        };

        rhr: rhr {
            compatible = "zmk,behavior-hold-tap";
            label = "RHR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <200>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22 39 41 40>;
        };

        lhsft: lhsft {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 13 14 15 16>;
        };

        rhsft: rhsft {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 19 20 21 22>;
        };

        rpi: require_prior_idle {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        ltqt: lt_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        qmark_excl: qmark_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QMARK_EXCL";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&trans  &kp Q         &lhr LA(LCTRL) W  &lhr LG(LCTRL) E  &kp R           &kp T          &kp Y        &kp U           &rhr LG(LCTRL) I  &rhr LA(LCTRL) O  &kp P           &trans
&trans  &lhr LCTRL A  &lhr LALT S       &lhr LGUI D       &lhsft LSHFT F  &kp G          &kp H        &rhsft LSHFT J  &rhr LGUI K       &rhr LALT L       &rhr LCTRL SQT  &trans
&trans  &kp Z         &kp X             &kp C             &kp V           &kp B          &kp N        &kp M           &comma_semi       &dot_colon        &qmark_excl     &trans
                                        &lt 3 ESC         &ltqt 1 SPACE   &ltqt 2 TAB    &ltqt 2 RET  &ltqt 1 BSPC    &ltqt 3 DEL
            >;
        };

        num_sym {
            bindings = <
&trans  &kp DLLR         &lhr LA(LCTRL) N7  &lhr LG(LCTRL) N8  &kp N9         &kp EQUAL    &kp PRCNT  &kp AMPS          &rhr LG(LCTRL) UNDER &rhr LA(LCTRL) HASH  &trans           &trans
&trans  &lhr LCTRL STAR  &lhr LALT N4       &lhr LGUI N5       &lhr LSHFT N6  &kp MINUS    &kp LT     &rhr LSHFT LPAR   &rhr LGUI LBKT       &rhr LALT LBRC       &rhr LCTRL PIPE  &trans
&trans  &kp FSLH         &kp N1             &kp N2             &kp N3         &kp PLUS     &kp GT     &kp RPAR          &kp RBKT             &kp RBRC             &kp BSLH         &trans
                                            &kp N0             &kp DOT        &kp GRAVE    &kp AT     &kp TILDE         &kp CARET
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans           &trans        &trans           &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &rhr LSHFT DOWN  &rhr LGUI UP  &rhr LALT RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PG_DN        &kp PG_UP     &kp END          &trans  &trans
                        &trans  &trans  &trans    &trans    &trans           &trans
            >;
        };

        fun_med {
            bindings = <
&trans &kp F12         &lhr LA(LCTRL) F7  &lhr LG(LCTRL) F8  &kp F9             &trans        &trans        &trans               &trans              &trans            &trans  &trans
&trans &lhr LCTRL F10  &lhr LALT F4       &lhr LGUI F5       &lhr LSHFT F6      &trans        &kp C_PREV    &rhr LSHFT C_VOL_DN  &rhr LGUI C_VOL_UP  &rhr LALT C_NEXT  &trans  &trans
&trans &kp F11         &kp F1             &kp F2             &kp F3             &trans        &kp C_MUTE    &kp C_BRI_DN         &kp C_BRI_UP        &kp C_PP          &trans  &trans 
                                                 &trans             &trans  &trans        &trans               &trans &trans
            >;
        };
    };
};
