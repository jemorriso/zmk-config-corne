/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define ___ &trans

#define MEH LA(LC(LSHFT))
#define HYPER LA(LC(LG(LSHFT)))
#define RAY LA(LC(LGUI))
#define LAUNCH LA(LG(LSHFT))

#define LAUNCHPAD LA(LC(LG(LS(F3))))
#define SPOTLIGHT LA(LC(LG(LS(F4))))
#define DICTATION LA(LC(LG(LS(F5))))
#define DO_NOT_DISTURB LA(LC(LG(LS(F6))))

/ {
    macros {
        zed_em_kay: zed_em_kay {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp Z &kp M &kp K>
                , <&macro_release &kp LSHFT>
                ;
        };

        warpd_hint: warpd_hint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LG(LC(X))>
                , <&tog 5>
                ;
        };
    };
};

/ {
    behaviors {
        lhhr: lhhr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhhr: rhhr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        lhhr_rpi: lhhr_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhhr_rpi: rhhr_rpi {
            compatible = "zmk,behavior-hold-tap";
            label = "RHHR_RPI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        lhlt: lhlt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhlt: rhlt {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        lhlt_rpi: lhlt_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        rhlt_rpi: rhlt_rpi {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        ltqt: lt_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
___                 &kp Q               &lhhr_rpi HYPER W   &lhhr_rpi MEH E     &lhhr_rpi LAUNCH R  &kp T               &kp Y               &rhhr_rpi LAUNCH U  &rhhr_rpi MEH I     &rhhr_rpi HYPER O   &kp P               ___   
___                 &lhhr_rpi LCTRL A   &lhhr_rpi LALT S    &lhhr_rpi LGUI D    &lhhr LSHFT F       &kp G               &kp H               &rhhr LSHFT J       &rhhr_rpi LGUI K    &rhhr_rpi LALT L    &rhhr_rpi LCTRL SQT ___   
___                 &lhhr_rpi RAY Z     &kp X               &kp C               &lhlt 2 V           &kp B               &kp N               &rhlt 2 M           &kp COMMA           &kp DOT             &rhhr_rpi RAY FSLH  ___   
                                                            &ltqt 3 ESC         &ltqt 1 SPACE       &ltqt 2 TAB         &ltqt 2 RET         &ltqt 1 BSPC        &ltqt 3 DEL
            >;
        };

        num_nav {
            bindings = <
___                 ___                 &lhhr HYPER N7      &lhhr MEH N8        &kp N9              ___                 ___                 ___                 ___                 ___                 ___                 ___   
___                 &lhhr LCTRL N0      &lhhr LALT N4       &lhhr LGUI N5       &lhhr LSHFT N6      ___                 &kp LEFT            &rhhr LSHFT DOWN    &rhhr LGUI UP       &rhhr LALT RIGHT    ___                 ___   
___                 ___                 &kp N1              &kp N2              &kp N3              ___                 &kp HOME            &kp PG_DN           &kp PG_UP           &kp END             ___                 ___   
                                                            ___                 &caps_word          ___                 ___                 ___                 ___   
            >;
        };

        symbol {
            bindings = <
___                 &kp EXCL            &lhhr HYPER AT      &lhhr MEH HASH      &kp DLLR            &kp PRCNT           &kp CARET           &kp AMPS            &kp LPAR            &kp RPAR            ___                 ___   
___                 &lhhr LCTRL GRAVE   &lhhr LALT BSLH     &lhhr LGUI EQUAL    &lhhr LSHFT MINUS   ___                 &kp STAR            &rhhr LSHFT SEMI    &rhhr LGUI LBKT     &rhhr LALT RBKT     ___                 ___   
___                 &kp TILDE           &kp PIPE            &kp PLUS            &kp UNDER           ___                 ___                 &kp COLON           &kp LBRC            &kp RBRC            ___                 ___   
                                                            ___                 ___                 &kp GRAVE           ___                 ___                 ___   
            >;
        };

        fun_med {
            bindings = <
___                 &kp F12             &lhhr HYPER F7      &lhhr MEH F8        &kp F9              ___                 ___                 &kp LAUNCHPAD       &kp SPOTLIGHT       &kp DICTATION       &kp DO_NOT_DISTURB  ___   
___                 &lhhr LCTRL F10     &lhhr LALT F4       &lhhr LGUI F5       &lhhr LSHFT F6      ___                 &kp C_PREV         &rhhr LSHFT C_VOL_DN &rhhr LGUI C_VOL_UP &rhhr LALT C_NEXT   ___                 ___   
___                 &kp F11             &kp F1              &kp F2              &kp F3              ___                 &kp C_MUTE          &kp C_BRI_DN        &kp C_BRI_UP        &kp C_PP            ___                 ___   
                                                            ___                 ___                 ___                 ___                 ___                 ___   
            >;
        };

        to_warpd {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___   
___                 ___                 &kp LC(LG(S))       ___                 &kp LSHFT           &kp LC(LG(G))       &kp LC(LG(H))       &kp LSHFT           ___                 &kp LC(LG(L))       ___                 ___   
___                 ___                 &kp LC(LG(X))       &kp LC(LG(C))       ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___   
                                                            ___                 ___                 ___                 ___                 ___                 ___   
            >;
        };

        warpd {
            bindings = <
___                 &kp Q               &kp W               &kp E               &kp R               &kp T               &kp Y               &kp U               &kp I               &kp O               &kp P               ___   
___                 &kp A               &kp S               &kp D               &kp F               &kp G               &kp H               &kp J               &kp K               &kp L               &kp SQT             ___   
___                 &kp Z               &kp X               &kp C               &kp V               &kp B               &kp N               &kp M               &kp COMMA           &kp DOT             &kp FSLH            ___   
                                                            &kp ESC             &kp SPACE           &kp TAB             &kp RET             &kp BSPC            &kp DEL            
            >;
        };

        empty {
            bindings = <
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___   
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___   
___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___                 ___   
                                                            ___                 ___                 ___                 ___                 ___                 ___   
            >;
        };
    };
};
